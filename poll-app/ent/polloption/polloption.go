// Code generated by ent, DO NOT EDIT.

package polloption

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the polloption type in the database.
	Label = "poll_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldVotes holds the string denoting the votes field in the database.
	FieldVotes = "votes"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgePoll holds the string denoting the poll edge name in mutations.
	EdgePoll = "poll"
	// Table holds the table name of the polloption in the database.
	Table = "poll_options"
	// PollTable is the table that holds the poll relation/edge.
	PollTable = "poll_options"
	// PollInverseTable is the table name for the Poll entity.
	// It exists in this package in order to avoid circular dependency with the "poll" package.
	PollInverseTable = "polls"
	// PollColumn is the table column denoting the poll relation/edge.
	PollColumn = "poll_options"
)

// Columns holds all SQL columns for polloption fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldVotes,
	FieldIsActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "poll_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"poll_options",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVotes holds the default value on creation for the "votes" field.
	DefaultVotes int
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the PollOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByVotes orders the results by the votes field.
func ByVotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVotes, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByPollField orders the results by poll field.
func ByPollField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPollStep(), sql.OrderByField(field, opts...))
	}
}
func newPollStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PollInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
	)
}
